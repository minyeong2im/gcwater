import streamlit as st  #임포트 스트리밋 그리고 스트리밋을 st라고 칭하자.

# 김천시 상하수도요금표 딕셔너리
이용요금표 = {
    "상수도": {
        "가정용":[
            {"구간":20, "단가":420},
            {"구간":30, "단가":653},
            {"구간":40, "단가":813},
            {"구간":float("inf"), "단가":1072},
        ],
        "일반용":[
            {"구간":50, "단가":727},
            {"구간":100,"단가":960},
            {"구간":300,"단가":1096},
            {"구간":1000,"단가":1268},
            {"구간":float("inf"),"단가":1465}
        ],
        "대중탕용":[
            {"구간":1000,"단가":838},
            {"구간":1500,"단가":997},
            {"구간":2000,"단가":1183},
            {"구간":float("inf"),"단가":555}
        ],
        "전용공업용":[
            {"구간":200,"단가":321},
            {"구간":float("inf"),"단가":555},
        ],
        "산업용":[
            {"구간":200,"단가":444},
            {"구간":float("inf"),"단가":678}
        ],
        "겸업용":[
            {"구간":15,"단가":420},
            {"구간":float("inf"),"단가":420}
        ],
    },
    "하수도":{
        "가정용":[
            {"구간":20,"단가":264},
            {"구간":30,"단가":678},
            {"구간":40,"단가":810},
            {"구간":float("inf"),"단가":955}
        ],
        "일반용":[
            {"구간":50,"단가":352},
            {"구간":100,"단가":1015},
            {"구간":300,"단가":1074},
            {"구간":1000,"단가":1133},
            {"구간":float("inf"),"단가":1205}
        ],
        "대중탕용":[
            {"구간":1000,"단가":692},
            {"구간":1500,"단가":1308},
            {"구간":2000,"단가":1471},
            {"구간":float("inf"),"단가":1559}
        ],
        "전용공업용":[
            {"구간":200,"단가":279},
            {"구간":float("inf"),"단가":529},
        ],
        "산업용":[
            {"구간":200,"단가":279},
            {"구간":float("inf"),"단가":529},
        ],
        "겸업용":[
            {"구간":15,"단가":264},
            {"구간":float("inf"),"단가":264}
        ]
    }
}

기본요금표 = {
    13:1330,
    20:3700,
    25:5950,
    40:17880,
    50:27410,
    75:66550,
    100:113330,
    150:247010,
    200:309000,
    250:460280,
    300:572280,
}

물이용부담금_단가 = 170 # 물이용부담금 단가

def rounddown_10(x: int) -> int:
    return (x // 10) * 10

def 요금분할(사용량: int):
    pass
            
def 기본요금(구경: int, 주기: str)->dict:    # 기본요금 함수 구경은정수로,주기는 문자열로 받는다, 리턴값은 정수로
    매월_격월 = 2 if 주기 == "격월" else 1 # 검침주기 변수 잡기, 삼항함수, 주기가 격월이면 2, 아니면 1
    금액 = 기본요금표.get(구경, 0) * 매월_격월  # 기본요금표 딕셔너리에서 구경에 따른 단가를 가져오고 * 검침주기변수 값
    return {"기본요금": 금액}

def 이용요금계산(요율표_리스트: list, 사용량: int) -> int:  # 이용요금계산이라는 함수, 매개함수
    요금 = 0    # 요금 초기값 0 잡기
    이전 = 0    # 이전 구간값 0 잡기
    남음 = 사용량   # 남음은 소모형식이므로 처음값 총사용량인 사용량 받아놓기
    for 단계 in 요율표_리스트:  # for 반복문
        구간 = 단계["구간"]     # 단계 "구간" key 값 사용
        단가 = 단계["단가"]     # 단계 "단가" key 값 사용
        사용 = min(남음, 구간 - 이전)   # 남음=남은 사용량과 구간 -이전 값 중 적은값을 도출한다.(남은 사용량은 현재구간을 초과할수 없기에 다음구간으로 넘기기위해 적은값구함)
        if 사용 > 0:            # 조건문 if 시작 사용량이 0보다 크다면
            요금 += 사용 * 단가     # 요금에 사용량 * 단가를 더한다.
            남음 -= 사용            # 남은(초기값은 총사용량)에 사용량은 뺀다
            이전 = 구간             # 이번 구간 계산 끝, 다음 구간 기준점 이동
        if 남음 <= 0:              # 남은 사용량이 0이하라면 
            break                  # 반복을 멈춘다 >근데 그냥 if남은 대신에 else break 로 끝내도 되지않나?
    return 요금             # +=사용 * 단가가 된 값의 총합을 돌려준다.

def 조정된_요율표(원본_리스트:list,주기:str,세대수:int=1,업종: str="") ->list:    # 준비물로 리스트와 주기를 받는다.
    매월_격월 = 2 if 주기 == "격월" else 1      # 삼항연산자? 암튼 if문 내용을 알어 너한테 배웠어
    변환된 = []                             # 변환된 이라는 이름의 빈 리스트
    for 단계 in 원본_리스트:                    # for 반복문 원본_리스트안에 단계를 반복한다.
        구간 = 단계["구간"]                     # 구간 라는 변수에 단계["구간"] ::단계는 반복을 위한
        단가 = 단계["단가"]                     # 마찬가지의 구조
        
        if 구간 == float("inf"):
            실제구간 = float("inf")
        else:
            #가정용 세대수 만큼 구간확장
            if 업종 == "가정용":
                실제구간 = 구간 * 매월_격월 * 세대수
            else:
                실제구간 = 구간 * 매월_격월
                
        변환된.append({"구간": 실제구간, "단가": 단가})
    return 변환된   # 변환된(리스트) 변수값을 돌려준다

def 상수도요금(업종:str, 사용량: int, 주기: str, 세대수: int=1)->dict:  
    #업종은 문자열,사용량은 정수, 구경값은 정수, 주기는 문자열로 받으며 리턴값은 딕셔너리로 돌려준다.
    raw = 이용요금표["상수도"].get(업종)    # raw(원본)변수 = 이용요금표딕셔너리를 가져옴.
    if raw is None: # 만약 raw에 해당하는 딕셔너리에 값이 없다면.
        raise ValueError(f"상수도 업종 '{업종}' 미등록") # raise(제시하다,일으키다,올리다) 값 에러, f문자열로 상수도 업종 미등록으로 프린트
    table = 조정된_요율표(raw, 주기, 세대수, 업종)    # 테이블이란 변수, 조정된_요율표 함수에 raw변수와, 주기값을 받는다.
    이용 = 이용요금계산(table, 사용량) # 이용이란 변수, 이용요금계산 함수에 table 변수와, 사용량값을 받는다.
    이용 = rounddown_10(이용)
    return {"상수도이용요금": 이용}   # 상수도이용요금 문자열에 이용변수 값을 같이 돌려준다. 

def 하수도요금(업종: str, 사용량: int, 주기: str, 세대수:int=1)->dict:
    # 상수도요금 함수와 일치한 구조
    raw = 이용요금표["하수도"].get(업종)
    if raw is None:
        raise ValueError(f"하수도 업종 '{업종}' 미등록")
    table = 조정된_요율표(raw, 주기, 세대수, 업종)
    이용 = 이용요금계산(table, 사용량)
    이용 = rounddown_10(이용)
    return {"하수도이용요금": 이용}

def 복지감면계산(감면세대수:int=0, 주기:str="매월")->dict:
    if 감면세대수 <=0:
        return {"상수도감면":0, "하수도감면":0, "부담금감면":0, "총감면":0}
    
    배율 = 2 if 주기 == "격월" else 1
    상수도감면 = 4200 * 감면세대수 * 배율
    하수도감면 = 2640 * 감면세대수 * 배율
    부담금감면 = 1700 * 감면세대수 * 배율
    총감면 = 상수도감면 + 하수도감면 + 부담금감면
    
    return {
        "상수도감면":상수도감면,
        "하수도감면":하수도감면,
        "부담금감면":부담금감면,
        "총감면":총감면
    }
    
def 겸업요금(사용량: int, 주기: str="매월",세대수:int=1)-> dict:
    #가정용(겸업은 월15톤)과 일반용 각각 계산
    가정한도 = (15 if 주기=="매월" else 30) * 세대수
    가정분 = min(사용량, 가정한도)
    일반분 = max(0, 사용량 - 가정분)
    
    가정요금_상수 = 상수도요금("겸업용", 가정분, 주기)
    일반요금_상수 = 상수도요금("일반용", 일반분, 주기)
    겸업_상수도합 = 가정요금_상수["상수도이용요금"]+일반요금_상수["상수도이용요금"]
    
    가정요금_하수 = 하수도요금("겸업용", 가정분, 주기)
    일반요금_하수 = 하수도요금("일반용", 일반분, 주기)
    겸업_하수도합 = 가정요금_하수["하수도이용요금"]+일반요금_하수["하수도이용요금"]
    
    return {
        "겸업_상수도":{
            "가정용_상수도": 가정요금_상수["상수도이용요금"],
            "일반용_상수도": 일반요금_상수["상수도이용요금"],
            "겸업_상수도합계": 겸업_상수도합,
        },
        "겸업_하수도":{
            "가정용_하수도": 가정요금_하수["하수도이용요금"],
            "일반용_하수도": 일반요금_하수["하수도이용요금"],
            "겸업_하수도합계": 겸업_하수도합
        }
    }
        
def 물이용부담금요금(사용량:int) -> dict:
    금액 = 사용량 * 물이용부담금_단가
    return {"물이용부담금": 금액}

def 총요금계산(업종:str, 사용량: int, 구경: int, 세대수:int=1, 하수도여부: bool=True, 겸업여부: bool=False, 주기: str="매월",감면세대수: int=0) ->dict:
# 업종,사용량,구경,하수도여부,주기를 받아서 딕셔너리형태로 값을 돌려준다.
    복지감면 = 복지감면계산(감면세대수, 주기)
    상수도복지 = 복지감면["상수도감면"]
    하수도복지 = 복지감면["하수도감면"]
    부담금복지 = 복지감면["부담금감면"]
    
    if 겸업여부:        # 복지감면 일단 보류, 겸업계산이 따로 출력이 되는거니, 조금더 가독성있는 방법 모색.
        기본 = 기본요금(구경, 주기)
        겸업 = 겸업요금(사용량, 주기,세대수)
        부담 = 물이용부담금요금(사용량)
        총 = 기본["기본요금"]+ 겸업["겸업_상수도"]["겸업_상수도합계"] + 겸업["겸업_하수도"]["겸업_하수도합계"] + 부담["물이용부담금"]
        return {"겸업":겸업, "물이용부담금": 부담, "총합계": 총}    
    else:
        기본 = 기본요금(구경, 주기)
        상수 = 상수도요금(업종, 사용량, 주기, 세대수)
        하수 = 하수도요금(업종, 사용량, 주기, 세대수) if 하수도여부 else {"하수도이용요금": 0}
        부담 = 물이용부담금요금(사용량)
        기본합계 = 기본["기본요금"] + 상수["상수도이용요금"] + 하수["하수도이용요금"] + 부담["물이용부담금"]
        
        최종상수 = max(0, 상수["상수도이용요금"] - 상수도복지)
        최종하수 = max(0, 하수["하수도이용요금"] - 하수도복지)
        최종부담 = max(0, 부담["물이용부담금"] - 부담금복지)
        복지적용합계 = 기본["기본요금"] + 최종상수 + 최종하수 + 최종부담
        return {
            "기본요금": 기본["기본요금"],
            "상수도이용요금": 상수["상수도이용요금"],
            "하수도이용요금": 하수["하수도이용요금"],
            "물이용부담금": 부담["물이용부담금"],
            "총합계": 기본합계,
            
            "세대감면": 복지감면,
            "복지적용합계": 복지적용합계
        }

st.title("김천시 상하수도 요금 계산기")

# 입력값
업종 = st.selectbox("업종 선택", ["가정용", "일반용", "대중탕용", "전용공업용", "산업용"])
사용량 = st.number_input("사용량 (톤)", min_value=0, step=1)
구경 = st.selectbox("계량기 구경 (mm)", [13, 20, 25, 40, 50, 75, 100, 150, 200, 250, 300])
세대수 = st.number_input("세대수 (가정용만 해당)", min_value=1, step=1, value=1)
주기 = st.selectbox("검침 주기", ["매월", "격월"])
하수도여부 = st.checkbox("하수도 포함 여부", value=True)
겸업여부 = st.checkbox("겸업 여부", value=False)
감면세대수 = st.number_input("복지 감면 세대수", min_value=0, step=1, value=0)

if st.button("요금 계산하기"):
    결과 = 총요금계산(
        업종=업종,
        사용량=사용량,
        구경=구경,
        세대수=세대수,
        하수도여부=하수도여부,
        겸업여부=겸업여부,
        주기=주기,
        감면세대수=감면세대수
    )
    st.subheader("계산 결과")
    st.write(결과)